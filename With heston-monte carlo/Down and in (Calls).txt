import numpy as np

def vectorized_down_and_in_barrier_option_price(S, K, B, T, a, b, rho_svi, m, s, F, r=0.01, v0=0.04, kappa=1.5, theta=0.04, xi=0.3, rho=-0.6,
                                               lambda_jump=0, mu_jump=0, delta_jump=0, q=0.01, N=100000, M=100):
    dt = T / M
    option_price = 0.0
    
    S_t = np.full(N, S)
    v_t = np.full(N, v0)
    crossed_barrier = np.zeros(N, dtype=bool)

    for j in range(M):
        sigma = volatility_surface(K, T - j * dt, a, b, rho_svi, m, s, F)
        
        Z = np.random.normal(0, 1, (2, N))
        Z1, Z2 = Z[0], rho * Z[0] + np.sqrt(1 - rho ** 2) * Z[1]
        
        v_t = np.maximum(v_t, 0)
        v_t += kappa * (theta - v_t) * dt + xi * np.sqrt(v_t) * np.sqrt(dt) * Z1 + 0.25 * xi ** 2 * dt * (Z1 ** 2 - 1)
        
        jumps = np.random.poisson(lambda_jump * dt, N)
        S_jump = np.exp(mu_jump * jumps + 0.5 * delta_jump ** 2 * jumps)
        
        dS_t = (r - q - 0.5 * v_t) * S_t * dt + np.sqrt(v_t * S_t) * np.sqrt(dt) * Z2
        S_t += dS_t + 0.5 * v_t * S_t * dt * (Z2 ** 2 - 1) * S_jump

        if barrier_type == 'down-and-in':
            crossed_barrier = np.logical_or(crossed_barrier, S_t < B)

    payoffs = np.maximum(S_t - K, 0)
    
    # Zero out payoffs for paths that did not cross the barrier
    if barrier_type == 'down-and-in':
        payoffs[np.logical_not(crossed_barrier)] = 0

    option_price = np.mean(np.exp(-r * T) * payoffs)

    return option_price

price = vectorized_down_and_in_barrier_option_price(S, K, B, T, a, b, rho_svi, m, s, F)
print(f"The price of the down-and-in call barrier option is: ${price:.2f}")
