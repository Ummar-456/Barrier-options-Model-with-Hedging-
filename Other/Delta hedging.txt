import numpy as np

# Simulation parameters
time_steps = 252  # Number of trading days
dt = T / time_steps  # Time step size
hedged_position = 0  # Initialize hedged position
cash_position = 0  # Initialize cash position
transaction_cost_rate = 0.001  # 0.1% of the trade value
slippage = 0.05  # Fixed slippage per share
hedged_position_history = []
cash_position_history = []
underlying_price_history = []
def calculate_greeks(S, K, B, T, a, b, rho_svi, m, s, F):
    dS = 0.01 * S
    d_sigma = 0.01 * a
    dT = 0.01 * T

    price = barrier_option_price(S, K, B, T, a, b, rho_svi, m, s, F)
    price_plus_dS = barrier_option_price(S + dS, K, B, T, a, b, rho_svi, m, s, F)
    delta = (price_plus_dS - price) / dS

    return delta

    
for t in range(time_steps):
    # Calculate current delta
    delta = calculate_greeks(S, K, B, T - t * dt, a, b, rho_svi, m, s, F)

    # Determine the required hedge
    required_hedge = delta * 100  # Assuming 100 options

    # Rebalance the hedge
    delta_hedge = required_hedge - hedged_position
    hedged_position += delta_hedge

    # Calculate transaction costs
    transaction_cost = abs(delta_hedge * S) * transaction_cost_rate

    # Calculate slippage (positive for buying, negative for selling)
    trade_slippage = slippage * delta_hedge if delta_hedge > 0 else -slippage * delta_hedge

    # Update cash position (considering transaction costs and slippage)
    cash_position -= (delta_hedge * S + transaction_cost + trade_slippage)

    # Simulate underlying price movement (using a more realistic model if needed)
    S += np.random.normal(0, a * np.sqrt(dt))

    # Update the time to maturity
    T -= dt
    hedged_position_history.append(hedged_position)
    cash_position_history.append(cash_position)
    underlying_price_history.append(S)
import matplotlib.pyplot as plt

plt.figure(figsize=(14, 6))

plt.subplot(3, 1, 1)
plt.plot(hedged_position_history, label='Hedged Position')
plt.title('Hedged Position Over Time')
plt.ylabel('Shares')
plt.legend()

plt.subplot(3, 1, 2)
plt.plot(cash_position_history, label='Cash Position', color='green')
plt.title('Cash Position Over Time')
plt.ylabel('Cash')
plt.legend()

plt.subplot(3, 1, 3)
plt.plot(underlying_price_history, label='Underlying Price', color='red')
plt.title('Underlying Asset Price Over Time')
plt.xlabel('Time Steps')
plt.ylabel('Price')
plt.legend()

plt.tight_layout()
plt.show()
